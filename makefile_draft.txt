AL = main.c generalUtils.c generalUtils.h opDef.c opDef.h wordId.c wordId.h wordTrans.c wordTrans.h labUtils.c labUtils.h sWordSetters.c sWordSetters.h parseLineUtils.c parseLineUtils.h parseLine.c parseLine.h numsData.c numsData.h strData.c strData.h opUtils.c opUtils.h firstParse.c firstParse.h secParse.c secParse.h outputUtils.c outputUtils.h uWordSetters.c uWordSetters.h opWordGetSet.c opWordGetSet.h sWordListUtils.c sWordListUtils.h sWordGetters.c sWordGetters.h uWordGetters.c uWordGetters.h labGetters.c labGetters.h labSetters.c labSetters.h labLstUtils.c labLstUtils.h fileUtils.c fileUtils.h sWordUtils.c sWordUtils.h uWordUtils.c uWordUtils.h assembler.c assembler.h globalVars.c rawWordLstUtils.c rawWordLstUtils.h rawWordUtils.c rawWordUtils.h errFuncs.c errFuncs.h globalVars.h
assembler: $(AL)
	gcc -Wall -ansi -pedantic -lm $(AL)

#ASS = labUtils.h, firstParse.h, fileUtils.h, secParse.h, outputUtils.h, sWordListUtils.h, labLstUtils.h, labGetters.h, labSetters.h, globalVars.h
#assembler.c: $(ASS)
##	gcc -Wall -ansi -pedantic -lm $(ASS)
#
#ERRF = generalUtils.h, wordId.h, fileUtils.h, globalVars.h
#errFuncs.c: $(ERRF)
##	gcc -Wall -ansi -pedantic -lm $(ERRF)
#
#FILEU = fileUtils.h, errFuncs.h
#fileUtils.c: $(FILEU)
##	gcc -Wall -ansi -pedantic -lm $(FILEU)
#
#FIRSTP = parseLine.h, parseLineUtils.h, labUtils.h, globalVars.h
#firstParse.c: $(FIRSTP)
##	gcc -Wall -ansi -pedantic -lm $(FIRSTP)
#
#GENU = generalUtils.h, errFuncs.h
#generalUtils.c: $(GENU)
##	gcc -Wall -ansi -pedantic -lm $(GENU)
#
#GVAR = generalUtils.h
#globalVars.c: $(GVAR)
##	gcc -Wall -ansi -pedantic -lm $(GVAR)
#
#LGET = labGetters.h
#labGetters.c: $(LGET)
##	gcc -Wall -ansi -pedantic -lm $(LGET)
#
#LABLU = labLstUtils.h, labUtils.h, labSetters.h, labGetters.h, errFuncs.h, globalVars.h
#labLstUtils.c: $(LABLU)
##	gcc -Wall -ansi -pedantic -lm $(LABLU)
#
#LABS = labSetters.h
#labSetters.c: $(LABS)
##	gcc -Wall -ansi -pedantic -lm $(LABS)
#
#LABU = labUtils.h, labSetters.h, labGetters.h, parseLineUtils.h, errFuncs.h, opDefGetters.h, globalVars.h
#labUtils.c: $(LABU)
##	gcc -Wall -ansi -pedantic -lm $(LABU)
#
#MN = assembler.h, errFuncs.h
#main.c: $(MN)
##	gcc -Wall -ansi -pedantic -lm $(MN)
#
#NUMD = parseLineUtils.h, labSetters.h, sWordListUtils.h, labLstUtils.h, rawWordUtils.h, rawWordLstUtils.h, errFuncs.h, globalVars.h
#numsData.c: $(NUMD)
##	gcc -Wall -ansi -pedantic -lm $(NUMD)
#
#OPD = opDef.h, wordId.h
#opDef.c: $(OPD)
##	gcc -Wall -ansi -pedantic -lm $(OPD)
#
#OPU = opDef.h, parseLineUtils.h, labUtils.h, labSetters.h, sWordListUtils.h, opWordSetters.h, labLstUtils.h, errFuncs.h, globalVars.hop
#opUtils.c: $(OPU)
##	gcc -Wall -ansi -pedantic -lm $(OPU)
#
#OWGS = opWordGetSet.h
#opWordGetSet.c: $(OWGS)
##	gcc -Wall -ansi -pedantic -lm $(OWGS)
#
#OUTU = wordTrans.h, labUtils.h, sWordGetters.h, sWordSetters.h, labGetters.h, fileUtils.h, labLstUtils.h, sWordListUtils.h, sWordUtils.h, rawWordLstUtils.h, rawWordUtils.h, globalVars.h
#outputUtils.c: $(OUTU)
##	gcc -Wall -ansi -pedantic -lm $(OUTU)
#
#PARL = parseLineUtils.h, labUtils.h, strData.h, opDef.h, sWordListUtils.h, labSetters.h, labLstUtils.h, opUtils.h, errFuncs.h numsData.h globalVars.h
#parseLine.c: $(PARL)
##	gcc -Wall -ansi -pedantic -lm $(PARL)
#
#PARLU = parseLineUtils.h, errFuncs.h
#parseLineUtils.c: $(PARLU)
##	gcc -Wall -ansi -pedantic -lm $(PARLU)
#
#RWLU = rawWordUtils.h
#rawWordLstUtils.c: $(RWLU)
##	gcc -Wall -ansi -pedantic -lm $(RWLU)
#
#RWU = rawWordUtils.h
#rawWordUtils.c: $(RWU)
##	gcc -Wall -ansi -pedantic -lm $(RWU)
#
#SECP = secParse.h, labSetters.h, sWordGetters.h, labLstUtils.h, sWordListUtils.h, sWordUtils.h, labGetters.h, errFuncs.h, sWordSetters.h
#secParse.c: $(SECP)
##	gcc -Wall -ansi -pedantic -lm $(SECP)
#
#STRD = parseLineUtils.h, labLstUtils.h, labSetters.h, sWordListUtils.h, errFuncs.h, globalVars.h
#strData.c: $(STRD)
##	gcc -Wall -ansi -pedantic -lm $(STRD)
#
#SWG = uWordGetters.h
#sWordGetters.c: $(SWG)
##	gcc -Wall -ansi -pedantic -lm $(SWG)
#
#SWLU = sWordListUtils.h, labUtils.h, labSetters.h, sWordSetters.h, sWordUtils.h, globalVars.h
#sWordLstUtils.c: $(SWLU)
##	gcc -Wall -ansi -pedantic -lm $(SWLU)
#
#SWSET = uWordSetters.h, sWordGetters.h
#sWordSetters.c: $(SWSET)
##	gcc -Wall -ansi -pedantic -lm $(SWSET)
#
#SWU = uWordUtils.h, sWordSetters.h
#sWordUtils.c: $(SWU)
##	gcc -Wall -ansi -pedantic -lm $(SWU)
#
#UWG = labGetters.h
#uWordGetters.c: $(UWG)
##	gcc -Wall -ansi -pedantic -lm $(UWG)
#
#UWSET: labSetters.h, uWordGetters.h
#uWordSetters.c: $(UWSET)
##	gcc -Wall -ansi -pedantic -lm $(UWSET)
#
#UWU: labUtils.h, sWordGetters.h
#uWordUtils.c: $(UWU)
##	gcc -Wall -ansi -pedantic -lm $(UWU)
#
#WID: wordId.h, errFuncs.h
#wordId.c: $(WID)
##	gcc -Wall -ansi -pedantic -lm $(WID)
#
#WTR: wordTrans.h, opDef.h, opWordGetSet.h, sWordGetters.h
#wordTrans.c: $(WTR)
##	gcc -Wall -ansi -pedantic -lm $(WTR)
#
#ASSH = generalUtils.h
#assembler.h: $(ASSH)
##	gcc -Wall -ansi -pedantic -lm $(ASSH)
#
#ERRFH = errFuncs.h
#errFuncsh.h: $(ERRFH)
##	gcc -Wall -ansi -pedantic -lm $(ERRF)
#
#FILEUH = generalUtils.h
#fileUtils.h: $(FILEUH)
##	gcc -Wall -ansi -pedantic -lm $(FILEUH)
#
#FIRSTPH = wordId.h, generalUtils.h
#firstParse.h: $(FIRSTPH)
##	gcc -Wall -ansi -pedantic -lm $(FIRSTPH)
#
#GENUH = generalUtils.h
#generalUtils.h: $(GENUH)
##	gcc -Wall -ansi -pedantic -lm $(GENUH)
#
#GVARH = globalVars.h
#globalVarsh.h: $(GVARH)
##	gcc -Wall -ansi -pedantic -lm $(GVARH)
#
#LGETH = wordId.h
#labGetters.h: $(LGETH)
##	gcc -Wall -ansi -pedantic -lm $(LGETH)
#
#LABLUH = wordId.h, generalUtils.h
#labLstUtils.h: $(LABLUH)
##	gcc -Wall -ansi -pedantic -lm $(LABLUH)
#
#LABSH = wordId.h, generalUtils.h
#labSetters.h: $(LABSH)
##	gcc -Wall -ansi -pedantic -lm $(LABSH)
#
#LABUH = wordId.h, generalUtils.h
#labUtils.h: $(LABUH)
##	gcc -Wall -ansi -pedantic -lm $(LABUH)
#
#NUMDH = wordId.h, generalUtils.h
#numsData.h: $(NUMDH)
##	gcc -Wall -ansi -pedantic -lm $(NUMDH)
#
#OPDH = opDef.h
#opDef.h: $(OPDH)
##	gcc -Wall -ansi -pedantic -lm $(OPDH)
#
##OPUH = wordId.h, generalUtils.h
##opUtils.h: $(OPUH)
#	gcc -Wall -ansi -pedantic -lm $(OPUH)
#
#OWGSH = wordId.h
#opWordGetSet.h: $(OWGSH)
##	gcc -Wall -ansi -pedantic -lm $(OWGSH)
#
#OUTUH = wordId.h, generalUtils.h
#outputUtils.h: $(OUTUH)
##	gcc -Wall -ansi -pedantic -lm $(OUTUH)
#
#PARLH = wordId.h, generalUtils.h
#parseLine.h: $(PARLH)
##	gcc -Wall -ansi -pedantic -lm $(PARLH)
#
#PARLUH = wordId.h, generalUtils.h
#parseLineUtils.h: $(PARLUH)
##	gcc -Wall -ansi -pedantic -lm $(PARLUHH)
#
#RWLU = wordId.h
#rawWordLstUtils.h: $(RWLU)
##	gcc -Wall -ansi -pedantic -lm $(RWLU)
#
#RWUH = wordId.h, generalUtils.h
#rawWordUtils.h: $(RWUH)
##	gcc -Wall -ansi -pedantic -lm $(RWUH)
#
#SECPH = wordId.h, generalUtils.h
#secParse.h: $(SECPH)
##	gcc -Wall -ansi -pedantic -lm $(SECPH)
#
#STRDH = wordId.h, generalUtils.h
#strData.h: $(STRDH)
##	gcc -Wall -ansi -pedantic -lm $(STRDH)
#
#SWGH = wordId.h
#sWordGetters.h: $(SWGH)
##	gcc -Wall -ansi -pedantic -lm $(SWGH)
#
#SWLUH = wordId.h, generalUtils.h
#sWordLstUtils.h: $(SWLUH)
##	gcc -Wall -ansi -pedantic -lm $(SWLUH)
#
#SWSETH = wordId.h
#sWordSetters.h: $(SWSETH)
##	gcc -Wall -ansi -pedantic -lm $(SWSETH)
#
#SWUH = wordId.h, generalUtils.h
#sWordUtils.h: $(SWUH)
##	gcc -Wall -ansi -pedantic -lm $(SWUH)
#
#UWGH = wordId.h
#uWordGetters.h: $(UWGH)
##	gcc -Wall -ansi -pedantic -lm $(UWGH)
#
#UWSETH: wordId.h
#uWordSetters.h: $(UWSETH)
##	gcc -Wall -ansi -pedantic -lm $(UWSETH)
#
#UWUH: wordId.h, generalUtils.h
#uWordUtils.h: $(UWUH)
##	gcc -Wall -ansi -pedantic -lm $(UWUH)
#
#WIDH: generalUtils.h
#wordId.h: $(WIDH)
##	gcc -Wall -ansi -pedantic -lm $(WIDH)
#
#WTRH: wordId.h
#wordTrans.h: $(WTRH)
##	gcc -Wall -ansi -pedantic -lm $(WTRH)
#
#AL = assembler.c, errFuncs.c, fileUtils.c, firstParse.c, generalUtils.c, globalVars.c, labGetters.c, labLstUtils.c, labSetters.c, labUtils.c, main.c, numsData.c, opDef.c, opUtils.c, opWordGetSet.c, outputUtils.c, parseLine.c, parseLineUtils.c, rawWordLstUtils.c, rawWordUtils.c, secParse.c, strData.c, sWordGetters.c, sWordLstUtils.c, sWordSetters.c, sWordUtils.c, uWordGetters.c, uWordSetters.c, uWordUtils.c, wordId.c, wordTrans.c, assembler.h, errFuncs.h, fileUtils.h, firstParse.h, generalUtils.h, globalVars.h, labGetters.h, labLstUtils.h, labSetters.h, labUtils.h, numsData.h, opDef.h, opUtils.h, opWordGetSet.h, outputUtils.h, parseLine.h, parseLineUtils.h, rawWordLstUtils.h, rawWordUtils.h, secParse.h, strData.h, sWordGetters.h, sWordLstUtils.h, sWordSetters.h, sWordUtils.h, uWordGetters.h, uWordSetters.h, uWordUtils.h, wordId.h, wordTrans.h
#assembler: $(AL)
#	gcc -Wall -ansi -pedantic -lm -o assembler $(AL)
